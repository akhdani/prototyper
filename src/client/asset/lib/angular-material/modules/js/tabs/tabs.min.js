(function(window,angular,undefined){"use strict";angular.module("material.components.tabs",["material.core","material.components.icon"]);angular.module("material.components.tabs").directive("mdTab",MdTab);function MdTab(){return{require:"^?mdTabs",terminal:true,template:function(element,attr){var label=getLabel(),body=getTemplate();return""+"<md-tab-label>"+label+"</md-tab-label>"+"<md-tab-body>"+body+"</md-tab-body>";function getLabel(){return getLabelElement()||getLabelAttribute()||getElementContents();function getLabelAttribute(){return attr.label}function getLabelElement(){var label=element.find("md-tab-label").eq(0);if(label.length)return label.remove().html()}function getElementContents(){var html=element.html();element.empty();return html}}function getTemplate(){var content=element.find("md-tab-body").eq(0),template=content.length?content.html():attr.label?element.html():"";if(content.length)content.remove();else if(attr.label)element.empty();return template}},scope:{active:"=?mdActive",disabled:"=?ngDisabled",select:"&?mdOnSelect",deselect:"&?mdOnDeselect"},link:postLink};function postLink(scope,element,attr,ctrl){if(!ctrl)return;var tabs=element.parent()[0].getElementsByTagName("md-tab"),index=Array.prototype.indexOf.call(tabs,element[0]),body=element.find("md-tab-body").eq(0).remove(),label=element.find("md-tab-label").eq(0).remove(),data=ctrl.insertTab({scope:scope,parent:scope.$parent,index:index,element:element,template:body.html(),label:label.html()},index);scope.select=scope.select||angular.noop;scope.deselect=scope.deselect||angular.noop;scope.$watch("active",function(active){if(active)ctrl.select(data.getIndex())});scope.$watch("disabled",function(){ctrl.refreshIndex()});scope.$watch(function(){return Array.prototype.indexOf.call(tabs,element[0])},function(newIndex){data.index=newIndex;ctrl.updateTabOrder()});scope.$on("$destroy",function(){ctrl.removeTab(data)})}}angular.module("material.components.tabs").directive("mdTabItem",MdTabItem);function MdTabItem(){return{require:"^?mdTabs",link:function link(scope,element,attr,ctrl){if(!ctrl)return;ctrl.attachRipple(scope,element)}}}angular.module("material.components.tabs").directive("mdTabLabel",MdTabLabel);function MdTabLabel(){return{terminal:true}}angular.module("material.components.tabs").directive("mdTabScroll",MdTabScroll);function MdTabScroll($parse){return{restrict:"A",compile:function($element,attr){var fn=$parse(attr.mdTabScroll,null,true);return function ngEventHandler(scope,element){element.on("mousewheel",function(event){scope.$apply(function(){fn(scope,{$event:event})})})}}}}MdTabScroll.$inject=["$parse"];angular.module("material.components.tabs").controller("MdTabsController",MdTabsController);function MdTabsController($scope,$element,$window,$timeout,$mdConstant,$mdTabInkRipple,$mdUtil,$animate,$attrs,$compile,$mdTheming){var ctrl=this,locked=false,elements=getElements(),queue=[],destroyed=false,loaded=false;defineProperty("focusIndex",handleFocusIndexChange,$scope.selectedIndex||0);defineProperty("offsetLeft",handleOffsetChange,0);defineProperty("hasContent",handleHasContent,false);ctrl.scope=$scope;ctrl.parent=$scope.$parent;ctrl.tabs=[];ctrl.lastSelectedIndex=null;ctrl.hasFocus=false;ctrl.lastClick=true;ctrl.shouldPaginate=false;ctrl.shouldCenterTabs=shouldCenterTabs();ctrl.redirectFocus=redirectFocus;ctrl.attachRipple=attachRipple;ctrl.shouldStretchTabs=shouldStretchTabs;ctrl.insertTab=insertTab;ctrl.removeTab=removeTab;ctrl.select=select;ctrl.scroll=scroll;ctrl.nextPage=nextPage;ctrl.previousPage=previousPage;ctrl.keydown=keydown;ctrl.canPageForward=canPageForward;ctrl.canPageBack=canPageBack;ctrl.refreshIndex=refreshIndex;ctrl.incrementSelectedIndex=incrementSelectedIndex;ctrl.updateInkBarStyles=$mdUtil.debounce(updateInkBarStyles,100);ctrl.updateTabOrder=$mdUtil.debounce(updateTabOrder,100);init();function init(){$scope.selectedIndex=$scope.selectedIndex||0;compileTemplate();configureWatchers();bindEvents();$mdTheming($element);$timeout(function(){updateHeightFromContent();adjustOffset();updatePagination();ctrl.tabs[$scope.selectedIndex]&&ctrl.tabs[$scope.selectedIndex].scope.select();loaded=true})}function compileTemplate(){var template=$attrs.$mdTabsTemplate,element=angular.element(elements.data);element.html(template);$compile(element.contents())(ctrl.parent);delete $attrs.$mdTabsTemplate}function bindEvents(){angular.element($window).on("resize",handleWindowResize);angular.element(elements.paging).on("DOMSubtreeModified",ctrl.updateInkBarStyles);angular.element(elements.paging).on("DOMSubtreeModified",updatePagination)}function configureWatchers(){$mdUtil.initOptionalProperties($scope,$attrs);$attrs.$observe("mdNoBar",function(value){$scope.noInkBar=angular.isDefined(value)});$scope.$watch("selectedIndex",handleSelectedIndexChange);$scope.$watch("dynamicHeight",function(value){if(value)$element.addClass("md-dynamic-height");else $element.removeClass("md-dynamic-height")});$scope.$on("$destroy",cleanup)}function cleanup(){destroyed=true;angular.element($window).off("resize",handleWindowResize);angular.element(elements.paging).off("DOMSubtreeModified",ctrl.updateInkBarStyles);angular.element(elements.paging).off("DOMSubtreeModified",updatePagination)}function handleHasContent(hasContent){$element[hasContent?"removeClass":"addClass"]("md-no-tab-content")}function handleOffsetChange(left){var newValue=ctrl.shouldCenterTabs?"":"-"+left+"px";angular.element(elements.paging).css($mdConstant.CSS.TRANSFORM,"translate3d("+newValue+", 0, 0)");$scope.$broadcast("$mdTabsPaginationChanged")}function handleFocusIndexChange(newIndex,oldIndex){if(newIndex===oldIndex)return;if(!elements.tabs[newIndex])return;adjustOffset();redirectFocus()}function handleSelectedIndexChange(newValue,oldValue){if(newValue===oldValue)return;$scope.selectedIndex=getNearestSafeIndex(newValue);ctrl.lastSelectedIndex=oldValue;ctrl.updateInkBarStyles();updateHeightFromContent();adjustOffset(newValue);$scope.$broadcast("$mdTabsChanged");ctrl.tabs[oldValue]&&ctrl.tabs[oldValue].scope.deselect();ctrl.tabs[newValue]&&ctrl.tabs[newValue].scope.select()}function handleResizeWhenVisible(){if(handleResizeWhenVisible.watcher)return;handleResizeWhenVisible.watcher=$scope.$watch(function(){$timeout(function(){if(!handleResizeWhenVisible.watcher)return;if($element.prop("offsetParent")){handleResizeWhenVisible.watcher();handleResizeWhenVisible.watcher=null;handleWindowResize()}},0,false)})}function keydown(event){switch(event.keyCode){case $mdConstant.KEY_CODE.LEFT_ARROW:event.preventDefault();incrementSelectedIndex(-1,true);break;case $mdConstant.KEY_CODE.RIGHT_ARROW:event.preventDefault();incrementSelectedIndex(1,true);break;case $mdConstant.KEY_CODE.SPACE:case $mdConstant.KEY_CODE.ENTER:event.preventDefault();if(!locked)$scope.selectedIndex=ctrl.focusIndex;break}ctrl.lastClick=false}function select(index){if(!locked)ctrl.focusIndex=$scope.selectedIndex=index;ctrl.lastClick=true;ctrl.tabs[index].element.triggerHandler("click")}function scroll(event){if(!ctrl.shouldPaginate)return;event.preventDefault();ctrl.offsetLeft=fixOffset(ctrl.offsetLeft-event.wheelDelta)}function nextPage(){var viewportWidth=elements.canvas.clientWidth,totalWidth=viewportWidth+ctrl.offsetLeft,i,tab;for(i=0;i<elements.tabs.length;i++){tab=elements.tabs[i];if(tab.offsetLeft+tab.offsetWidth>totalWidth)break}ctrl.offsetLeft=fixOffset(tab.offsetLeft)}function previousPage(){var i,tab;for(i=0;i<elements.tabs.length;i++){tab=elements.tabs[i];if(tab.offsetLeft+tab.offsetWidth>=ctrl.offsetLeft)break}ctrl.offsetLeft=fixOffset(tab.offsetLeft+tab.offsetWidth-elements.canvas.clientWidth)}function handleWindowResize(){$scope.$apply(function(){ctrl.lastSelectedIndex=$scope.selectedIndex;ctrl.offsetLeft=fixOffset(ctrl.offsetLeft);$timeout(ctrl.updateInkBarStyles,0,false);$timeout(updatePagination)})}function removeTab(tabData){var selectedIndex=$scope.selectedIndex,tab=ctrl.tabs.splice(tabData.getIndex(),1)[0];refreshIndex();if($scope.selectedIndex===selectedIndex&&!destroyed){tab.scope.deselect();ctrl.tabs[$scope.selectedIndex]&&ctrl.tabs[$scope.selectedIndex].scope.select()}$timeout(function(){updatePagination();ctrl.offsetLeft=fixOffset(ctrl.offsetLeft)})}function insertTab(tabData,index){var proto={getIndex:function(){return ctrl.tabs.indexOf(tab)},isActive:function(){return this.getIndex()===$scope.selectedIndex},isLeft:function(){return this.getIndex()<$scope.selectedIndex},isRight:function(){return this.getIndex()>$scope.selectedIndex},shouldRender:function(){return!$scope.noDisconnect||this.isActive()},hasFocus:function(){return!ctrl.lastClick&&ctrl.hasFocus&&this.getIndex()===ctrl.focusIndex},id:$mdUtil.nextUid()},tab=angular.extend(proto,tabData);if(angular.isDefined(index)){ctrl.tabs.splice(index,0,tab)}else{ctrl.tabs.push(tab)}processQueue();updateHasContent();if(loaded&&$scope.autoselect)$timeout(function(){select(ctrl.tabs.indexOf(tab))});$timeout(updatePagination);return tab}function getElements(){var elements={};elements.wrapper=$element[0].getElementsByTagName("md-tabs-wrapper")[0];elements.data=$element[0].getElementsByTagName("md-tab-data")[0];elements.canvas=elements.wrapper.getElementsByTagName("md-tabs-canvas")[0];elements.paging=elements.canvas.getElementsByTagName("md-pagination-wrapper")[0];elements.tabs=elements.paging.getElementsByTagName("md-tab-item");elements.dummies=elements.canvas.getElementsByTagName("md-dummy-tab");elements.inkBar=elements.paging.getElementsByTagName("md-ink-bar")[0];elements.contentsWrapper=$element[0].getElementsByTagName("md-tabs-content-wrapper")[0];elements.contents=elements.contentsWrapper.getElementsByTagName("md-tab-content");return elements}function canPageBack(){return ctrl.offsetLeft>0}function canPageForward(){var lastTab=elements.tabs[elements.tabs.length-1];return lastTab&&lastTab.offsetLeft+lastTab.offsetWidth>elements.canvas.clientWidth+ctrl.offsetLeft}function shouldStretchTabs(){switch($scope.stretchTabs){case"always":return true;case"never":return false;default:return!ctrl.shouldPaginate&&$window.matchMedia("(max-width: 600px)").matches}}function shouldCenterTabs(){return $scope.centerTabs&&!ctrl.shouldPaginate}function shouldPaginate(){if($scope.noPagination||!loaded)return false;var canvasWidth=$element.prop("clientWidth");angular.forEach(elements.dummies,function(tab){canvasWidth-=tab.offsetWidth});return canvasWidth<0}function getNearestSafeIndex(newIndex){var maxOffset=Math.max(ctrl.tabs.length-newIndex,newIndex),i,tab;for(i=0;i<=maxOffset;i++){tab=ctrl.tabs[newIndex+i];if(tab&&tab.scope.disabled!==true)return tab.getIndex();tab=ctrl.tabs[newIndex-i];if(tab&&tab.scope.disabled!==true)return tab.getIndex()}return newIndex}function defineProperty(key,handler,value){Object.defineProperty(ctrl,key,{get:function(){return value},set:function(newValue){var oldValue=value;value=newValue;handler(newValue,oldValue)}})}function updatePagination(){ctrl.shouldPaginate=shouldPaginate();ctrl.shouldCenterTabs=shouldCenterTabs();$timeout(function(){adjustOffset($scope.selectedIndex)})}function updateTabOrder(){var selectedItem=ctrl.tabs[$scope.selectedIndex],focusItem=ctrl.tabs[ctrl.focusIndex];ctrl.tabs=ctrl.tabs.sort(function(a,b){return a.index-b.index});$scope.selectedIndex=ctrl.tabs.indexOf(selectedItem);ctrl.focusIndex=ctrl.tabs.indexOf(focusItem)}function incrementSelectedIndex(inc){var newIndex,index=ctrl.focusIndex;for(newIndex=index+inc;ctrl.tabs[newIndex]&&ctrl.tabs[newIndex].scope.disabled;newIndex+=inc){}if(ctrl.tabs[newIndex]){ctrl.focusIndex=newIndex}}function redirectFocus(){elements.dummies[ctrl.focusIndex].focus()}function adjustOffset(index){if(ctrl.shouldCenterTabs)return;if(index==null)index=ctrl.focusIndex;var tab=elements.tabs[index],left=tab.offsetLeft,right=tab.offsetWidth+left;ctrl.offsetLeft=Math.max(ctrl.offsetLeft,fixOffset(right-elements.canvas.clientWidth));ctrl.offsetLeft=Math.min(ctrl.offsetLeft,fixOffset(left))}function processQueue(){queue.forEach(function(func){$timeout(func)});queue=[]}function updateHasContent(){var hasContent=false;angular.forEach(ctrl.tabs,function(tab){if(tab.template)hasContent=true});ctrl.hasContent=hasContent}function refreshIndex(){$scope.selectedIndex=getNearestSafeIndex($scope.selectedIndex);ctrl.focusIndex=getNearestSafeIndex(ctrl.focusIndex)}function updateHeightFromContent(){if(!$scope.dynamicHeight)return $element.css("height","");if(!ctrl.tabs.length)return queue.push(updateHeightFromContent);var tabContent=elements.contents[$scope.selectedIndex],contentHeight=tabContent?tabContent.offsetHeight:0,tabsHeight=elements.wrapper.offsetHeight,newHeight=contentHeight+tabsHeight,currentHeight=$element.prop("clientHeight");if(currentHeight===newHeight)return;locked=true;$animate.animate($element,{height:currentHeight+"px"},{height:newHeight+"px"}).then(function(){$element.css("height","");locked=false})}function updateInkBarStyles(){if(!elements.tabs[$scope.selectedIndex])return;if(!ctrl.tabs.length)return queue.push(ctrl.updateInkBarStyles);if(!$element.prop("offsetParent"))return handleResizeWhenVisible();var index=$scope.selectedIndex,totalWidth=elements.paging.offsetWidth,tab=elements.tabs[index],left=tab.offsetLeft,right=totalWidth-left-tab.offsetWidth;updateInkBarClassName();angular.element(elements.inkBar).css({left:left+"px",right:right+"px"})}function updateInkBarClassName(){var newIndex=$scope.selectedIndex,oldIndex=ctrl.lastSelectedIndex,ink=angular.element(elements.inkBar);if(!angular.isNumber(oldIndex))return;if(newIndex<oldIndex){ink.addClass("md-left").removeClass("md-right")}else if(newIndex>oldIndex){ink.addClass("md-right").removeClass("md-left")}}function fixOffset(value){if(!elements.tabs.length||!ctrl.shouldPaginate)return 0;var lastTab=elements.tabs[elements.tabs.length-1],totalWidth=lastTab.offsetLeft+lastTab.offsetWidth;value=Math.max(0,value);value=Math.min(totalWidth-elements.canvas.clientWidth,value);return value}function attachRipple(scope,element){var options={colorElement:angular.element(elements.inkBar)};$mdTabInkRipple.attach(scope,element,options)}}MdTabsController.$inject=["$scope","$element","$window","$timeout","$mdConstant","$mdTabInkRipple","$mdUtil","$animate","$attrs","$compile","$mdTheming"];angular.module("material.components.tabs").directive("mdTabs",MdTabs);function MdTabs($mdTheming,$mdUtil,$compile){return{scope:{noPagination:"=?mdNoPagination",dynamicHeight:"=?mdDynamicHeight",centerTabs:"=?mdCenterTabs",selectedIndex:"=?mdSelected",stretchTabs:"@?mdStretchTabs",swipeContent:"=?mdSwipeContent",noDisconnect:"=?mdNoDisconnect",autoselect:"=?mdAutoselect"},template:function(element,attr){attr["$mdTabsTemplate"]=element.html();return'        <md-tabs-wrapper ng-class="{ \'md-stretch-tabs\': $mdTabsCtrl.shouldStretchTabs() }">          <md-tab-data></md-tab-data>          <md-prev-button              tabindex="-1"              role="button"              aria-label="Previous Page"              aria-disabled="{{!$mdTabsCtrl.canPageBack()}}"              ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageBack() }"              ng-if="$mdTabsCtrl.shouldPaginate"              ng-click="$mdTabsCtrl.previousPage()">            <md-icon md-svg-icon="md-tabs-arrow"></md-icon>          </md-prev-button>          <md-next-button              tabindex="-1"              role="button"              aria-label="Next Page"              aria-disabled="{{!$mdTabsCtrl.canPageForward()}}"              ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageForward() }"              ng-if="$mdTabsCtrl.shouldPaginate"              ng-click="$mdTabsCtrl.nextPage()">            <md-icon md-svg-icon="md-tabs-arrow"></md-icon>          </md-next-button>          <md-tabs-canvas              tabindex="0"              aria-activedescendant="tab-item-{{$mdTabsCtrl.tabs[$mdTabsCtrl.focusIndex].id}}"              ng-focus="$mdTabsCtrl.redirectFocus()"              ng-class="{                  \'md-paginated\': $mdTabsCtrl.shouldPaginate,                  \'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs              }"              ng-keydown="$mdTabsCtrl.keydown($event)"              role="tablist">            <md-pagination-wrapper                ng-class="{ \'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs }"                md-tab-scroll="$mdTabsCtrl.scroll($event)">              <md-tab-item                  tabindex="-1"                  class="md-tab"                  style="max-width: {{ tabWidth ? tabWidth + \'px\' : \'none\' }}"                  ng-repeat="tab in $mdTabsCtrl.tabs"                  role="tab"                  aria-controls="tab-content-{{tab.id}}"                  aria-selected="{{tab.isActive()}}"                  aria-disabled="{{tab.scope.disabled || \'false\'}}"                  ng-click="$mdTabsCtrl.select(tab.getIndex())"                  ng-class="{                      \'md-active\':    tab.isActive(),                      \'md-focused\':   tab.hasFocus(),                      \'md-disabled\':  tab.scope.disabled                  }"                  ng-disabled="tab.scope.disabled"                  md-swipe-left="$mdTabsCtrl.nextPage()"                  md-swipe-right="$mdTabsCtrl.previousPage()"                  md-template="tab.label"                  md-scope="tab.parent"></md-tab-item>              <md-ink-bar ng-hide="noInkBar"></md-ink-bar>            </md-pagination-wrapper>            <div class="md-visually-hidden md-dummy-wrapper">              <md-dummy-tab                  class="md-tab"                  tabindex="-1"                  id="tab-item-{{tab.id}}"                  role="tab"                  aria-controls="tab-content-{{tab.id}}"                  aria-selected="{{tab.isActive()}}"                  aria-disabled="{{tab.scope.disabled || \'false\'}}"                  ng-focus="$mdTabsCtrl.hasFocus = true"                  ng-blur="$mdTabsCtrl.hasFocus = false"                  ng-repeat="tab in $mdTabsCtrl.tabs"                  md-template="tab.label"                  md-scope="tab.parent"></md-dummy-tab>            </div>          </md-tabs-canvas>        </md-tabs-wrapper>        <md-tabs-content-wrapper ng-show="$mdTabsCtrl.hasContent">          <md-tab-content              id="tab-content-{{tab.id}}"              role="tabpanel"              aria-labelledby="tab-item-{{tab.id}}"              md-swipe-left="swipeContent && $mdTabsCtrl.incrementSelectedIndex(1)"              md-swipe-right="swipeContent && $mdTabsCtrl.incrementSelectedIndex(-1)"              ng-if="$mdTabsCtrl.hasContent"              ng-repeat="(index, tab) in $mdTabsCtrl.tabs"              md-connected-if="tab.isActive()"              ng-class="{                \'md-no-transition\': $mdTabsCtrl.lastSelectedIndex == null,                \'md-active\':        tab.isActive(),                \'md-left\':          tab.isLeft(),                \'md-right\':         tab.isRight(),                \'md-no-scroll\':     dynamicHeight              }">            <div                md-template="tab.template"                md-scope="tab.parent"                ng-if="tab.shouldRender()"></div>          </md-tab-content>        </md-tabs-content-wrapper>      '},controller:"MdTabsController",controllerAs:"$mdTabsCtrl"}}MdTabs.$inject=["$mdTheming","$mdUtil","$compile"];angular.module("material.components.tabs").directive("mdTemplate",MdTemplate);function MdTemplate($compile,$mdUtil,$timeout){return{restrict:"A",link:link,scope:{template:"=mdTemplate",compileScope:"=mdScope",connected:"=?mdConnectedIf"},require:"^?mdTabs"};function link(scope,element,attr,ctrl){if(!ctrl)return;var compileScope=scope.compileScope.$new();element.html(scope.template);$compile(element.contents())(compileScope);return $timeout(handleScope);function handleScope(){scope.$watch("connected",function(value){value===false?disconnect():reconnect()});scope.$on("$destroy",reconnect)}function disconnect(){if(ctrl.scope.noDisconnect)return;$mdUtil.disconnectScope(compileScope)}function reconnect(){if(ctrl.scope.noDisconnect)return;$mdUtil.reconnectScope(compileScope)}}}MdTemplate.$inject=["$compile","$mdUtil","$timeout"]})(window,window.angular);