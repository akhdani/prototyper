(function(window,angular,undefined){"use strict";angular.module("material.components.radioButton",["material.core"]).directive("mdRadioGroup",mdRadioGroupDirective).directive("mdRadioButton",mdRadioButtonDirective);function mdRadioGroupDirective($mdUtil,$mdConstant,$mdTheming,$timeout){RadioGroupController.prototype=createRadioGroupControllerProto();return{restrict:"E",controller:["$element",RadioGroupController],require:["mdRadioGroup","?ngModel"],link:{pre:linkRadioGroup}};function linkRadioGroup(scope,element,attr,ctrls){$mdTheming(element);var rgCtrl=ctrls[0];var ngModelCtrl=ctrls[1]||$mdUtil.fakeNgModel();function setFocus(){if(!element.hasClass("md-focused")){element.addClass("md-focused")}}function keydownListener(ev){var keyCode=ev.which||ev.keyCode;switch(keyCode){case $mdConstant.KEY_CODE.LEFT_ARROW:case $mdConstant.KEY_CODE.UP_ARROW:ev.preventDefault();rgCtrl.selectPrevious();setFocus();break;case $mdConstant.KEY_CODE.RIGHT_ARROW:case $mdConstant.KEY_CODE.DOWN_ARROW:ev.preventDefault();rgCtrl.selectNext();setFocus();break;case $mdConstant.KEY_CODE.ENTER:var form=angular.element($mdUtil.getClosest(element[0],"form"));if(form.length>0){form.triggerHandler("submit")}break}}rgCtrl.init(ngModelCtrl);scope.mouseActive=false;element.attr({role:"radiogroup",tabIndex:element.attr("tabindex")||"0"}).on("keydown",keydownListener).on("mousedown",function(event){scope.mouseActive=true;$timeout(function(){scope.mouseActive=false},100)}).on("focus",function(){if(scope.mouseActive===false){rgCtrl.$element.addClass("md-focused")}}).on("blur",function(){rgCtrl.$element.removeClass("md-focused")})}function RadioGroupController($element){this._radioButtonRenderFns=[];this.$element=$element}function createRadioGroupControllerProto(){return{init:function(ngModelCtrl){this._ngModelCtrl=ngModelCtrl;this._ngModelCtrl.$render=angular.bind(this,this.render)},add:function(rbRender){this._radioButtonRenderFns.push(rbRender)},remove:function(rbRender){var index=this._radioButtonRenderFns.indexOf(rbRender);if(index!==-1){this._radioButtonRenderFns.splice(index,1)}},render:function(){this._radioButtonRenderFns.forEach(function(rbRender){rbRender()})},setViewValue:function(value,eventType){this._ngModelCtrl.$setViewValue(value,eventType);this.render()},getViewValue:function(){return this._ngModelCtrl.$viewValue},selectNext:function(){return changeSelectedButton(this.$element,1)},selectPrevious:function(){return changeSelectedButton(this.$element,-1)},setActiveDescendant:function(radioId){this.$element.attr("aria-activedescendant",radioId)}}}function changeSelectedButton(parent,increment){var buttons=$mdUtil.iterator(parent[0].querySelectorAll("md-radio-button"),true);if(buttons.count()){var validate=function(button){return!angular.element(button).attr("disabled")};var selected=parent[0].querySelector("md-radio-button.md-checked");var target=buttons[increment<0?"previous":"next"](selected,validate)||buttons.first();angular.element(target).triggerHandler("click")}}}mdRadioGroupDirective.$inject=["$mdUtil","$mdConstant","$mdTheming","$timeout"];function mdRadioButtonDirective($mdAria,$mdUtil,$mdTheming){var CHECKED_CSS="md-checked";return{restrict:"E",require:"^mdRadioGroup",transclude:true,template:'<div class="md-container" md-ink-ripple md-ink-ripple-checkbox>'+'<div class="md-off"></div>'+'<div class="md-on"></div>'+"</div>"+'<div ng-transclude class="md-label"></div>',link:link};function link(scope,element,attr,rgCtrl){var lastChecked;$mdTheming(element);configureAria(element,scope);rgCtrl.add(render);attr.$observe("value",render);element.on("click",listener).on("$destroy",function(){rgCtrl.remove(render)});function listener(ev){if(element[0].hasAttribute("disabled"))return;scope.$apply(function(){rgCtrl.setViewValue(attr.value,ev&&ev.type)})}function render(){var checked=rgCtrl.getViewValue()==attr.value;if(checked===lastChecked){return}lastChecked=checked;element.attr("aria-checked",checked);if(checked){element.addClass(CHECKED_CSS);rgCtrl.setActiveDescendant(element.attr("id"))}else{element.removeClass(CHECKED_CSS)}}function configureAria(element,scope){scope.ariaId=buildAriaID();element.attr({id:scope.ariaId,role:"radio","aria-checked":"false"});$mdAria.expectWithText(element,"aria-label");function buildAriaID(){return attr.id||"radio"+"_"+$mdUtil.nextUid()}}}}mdRadioButtonDirective.$inject=["$mdAria","$mdUtil","$mdTheming"]})(window,window.angular);