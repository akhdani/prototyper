goog.provide("ng.material.components.autocomplete");goog.require("ng.material.components.icon");goog.require("ng.material.core");angular.module("material.components.autocomplete",["material.core","material.components.icon"]);angular.module("material.components.autocomplete").controller("MdAutocompleteCtrl",MdAutocompleteCtrl);var ITEM_HEIGHT=41,MAX_HEIGHT=5.5*ITEM_HEIGHT,MENU_PADDING=8;function MdAutocompleteCtrl($scope,$element,$mdUtil,$mdConstant,$timeout,$mdTheming,$window,$animate,$rootElement,$attrs){var ctrl=this,itemParts=$scope.itemsExpr.split(/ in /i),itemExpr=itemParts[1],elements=null,promise=null,cache={},noBlur=false,selectedItemWatchers=[],hasFocus=false,lastCount=0;defineProperty("hidden",handleHiddenChange,true);ctrl.scope=$scope;ctrl.parent=$scope.$parent;ctrl.itemName=itemParts[0];ctrl.matches=[];ctrl.loading=false;ctrl.hidden=true;ctrl.index=null;ctrl.messages=[];ctrl.id=$mdUtil.nextUid();ctrl.isDisabled=null;ctrl.isRequired=null;ctrl.keydown=keydown;ctrl.blur=blur;ctrl.focus=focus;ctrl.clear=clearValue;ctrl.select=select;ctrl.listEnter=onListEnter;ctrl.listLeave=onListLeave;ctrl.mouseUp=onMouseup;ctrl.getCurrentDisplayValue=getCurrentDisplayValue;ctrl.registerSelectedItemWatcher=registerSelectedItemWatcher;ctrl.unregisterSelectedItemWatcher=unregisterSelectedItemWatcher;return init();function init(){$mdUtil.initOptionalProperties($scope,$attrs,{searchText:null,selectedItem:null});$mdTheming($element);configureWatchers();$timeout(function(){gatherElements();focusElement();moveDropdown()})}function positionDropdown(){if(!elements)return $timeout(positionDropdown,0,false);var hrect=elements.wrap.getBoundingClientRect(),vrect=elements.snap.getBoundingClientRect(),root=elements.root.getBoundingClientRect(),top=vrect.bottom-root.top,bot=root.bottom-vrect.top,left=hrect.left-root.left,width=hrect.width,styles={left:left+"px",minWidth:width+"px",maxWidth:Math.max(hrect.right-root.left,root.right-hrect.left)-MENU_PADDING+"px"};if(top>bot&&root.height-hrect.bottom-MENU_PADDING<MAX_HEIGHT){styles.top="auto";styles.bottom=bot+"px";styles.maxHeight=Math.min(MAX_HEIGHT,hrect.top-root.top-MENU_PADDING)+"px"}else{styles.top=top+"px";styles.bottom="auto";styles.maxHeight=Math.min(MAX_HEIGHT,root.bottom-hrect.bottom-MENU_PADDING)+"px"}elements.$.ul.css(styles);$timeout(correctHorizontalAlignment,0,false);function correctHorizontalAlignment(){var dropdown=elements.ul.getBoundingClientRect(),styles={};if(dropdown.right>root.right-MENU_PADDING){styles.left=hrect.right-dropdown.width+"px"}elements.$.ul.css(styles)}}function moveDropdown(){if(!elements.$.root.length)return;$mdTheming(elements.$.ul);elements.$.ul.detach();elements.$.root.append(elements.$.ul);if($animate.pin)$animate.pin(elements.$.ul,$rootElement)}function focusElement(){if($scope.autofocus)elements.input.focus()}function configureWatchers(){var wait=parseInt($scope.delay,10)||0;$attrs.$observe("disabled",function(value){ctrl.isDisabled=value});$attrs.$observe("required",function(value){ctrl.isRequired=value!==null});$scope.$watch("searchText",wait?$mdUtil.debounce(handleSearchText,wait):handleSearchText);registerSelectedItemWatcher(selectedItemChange);$scope.$watch("selectedItem",handleSelectedItemChange);angular.element($window).on("resize",positionDropdown);$scope.$on("$destroy",cleanup)}function cleanup(){angular.element($window).off("resize",positionDropdown);elements.$.ul.remove()}function gatherElements(){elements={main:$element[0],ul:$element.find("ul")[0],input:$element.find("input")[0],wrap:$element.find("md-autocomplete-wrap")[0],root:document.body};elements.li=elements.ul.getElementsByTagName("li");elements.snap=getSnapTarget();elements.$=getAngularElements(elements)}function getSnapTarget(){for(var element=$element;element.length;element=element.parent()){if(angular.isDefined(element.attr("md-autocomplete-snap")))return element[0]}return elements.wrap}function getAngularElements(elements){var obj={};for(var key in elements){obj[key]=angular.element(elements[key])}return obj}function handleHiddenChange(hidden,oldHidden){if(!hidden&&oldHidden)positionDropdown();if(!hidden){if(elements)$timeout(function(){$mdUtil.disableScrollAround(elements.ul)},0,false)}else{$mdUtil.enableScrolling()}}function onListEnter(){noBlur=true}function onListLeave(){noBlur=false;if(!hasFocus)ctrl.hidden=true}function onMouseup(){elements.input.focus()}function selectedItemChange(selectedItem,previousSelectedItem){if(selectedItem){$scope.searchText=getDisplayValue(selectedItem)}if($scope.itemChange&&selectedItem!==previousSelectedItem)$scope.itemChange(getItemScope(selectedItem))}function handleSelectedItemChange(selectedItem,previousSelectedItem){for(var i=0;i<selectedItemWatchers.length;++i){selectedItemWatchers[i](selectedItem,previousSelectedItem)}}function registerSelectedItemWatcher(cb){if(selectedItemWatchers.indexOf(cb)==-1){selectedItemWatchers.push(cb)}}function unregisterSelectedItemWatcher(cb){var i=selectedItemWatchers.indexOf(cb);if(i!=-1){selectedItemWatchers.splice(i,1)}}function handleSearchText(searchText,previousSearchText){ctrl.index=getDefaultIndex();if(searchText===previousSearchText)return;if(searchText!==getDisplayValue($scope.selectedItem))$scope.selectedItem=null;else return;if($scope.textChange&&searchText!==previousSearchText)$scope.textChange(getItemScope($scope.selectedItem));if(!isMinLengthMet()){ctrl.loading=false;ctrl.matches=[];ctrl.hidden=shouldHide();updateMessages()}else{handleQuery()}}function blur(){hasFocus=false;if(!noBlur)ctrl.hidden=true}function focus(){hasFocus=true;if(!angular.isString($scope.searchText))$scope.searchText="";if($scope.minLength>0)return;ctrl.hidden=shouldHide();if(!ctrl.hidden)handleQuery()}function keydown(event){switch(event.keyCode){case $mdConstant.KEY_CODE.DOWN_ARROW:if(ctrl.loading)return;event.preventDefault();ctrl.index=Math.min(ctrl.index+1,ctrl.matches.length-1);updateScroll();updateMessages();break;case $mdConstant.KEY_CODE.UP_ARROW:if(ctrl.loading)return;event.preventDefault();ctrl.index=ctrl.index<0?ctrl.matches.length-1:Math.max(0,ctrl.index-1);updateScroll();updateMessages();break;case $mdConstant.KEY_CODE.TAB:case $mdConstant.KEY_CODE.ENTER:if(ctrl.hidden||ctrl.loading||ctrl.index<0||ctrl.matches.length<1)return;event.preventDefault();select(ctrl.index);break;case $mdConstant.KEY_CODE.ESCAPE:ctrl.matches=[];ctrl.hidden=true;ctrl.index=getDefaultIndex();break;default:}}function getMinLength(){return angular.isNumber($scope.minLength)?$scope.minLength:1}function getDisplayValue(item){return item&&$scope.itemText?$scope.itemText(getItemScope(item)):item}function getItemScope(item){if(!item)return;var locals={};if(ctrl.itemName)locals[ctrl.itemName]=item;return locals}function getDefaultIndex(){return $scope.autoselect?0:-1}function shouldHide(){if(!isMinLengthMet())return true}function getCurrentDisplayValue(){return getDisplayValue(ctrl.matches[ctrl.index])}function isMinLengthMet(){return angular.isDefined($scope.searchText)&&$scope.searchText.length>=getMinLength()}function defineProperty(key,handler,value){Object.defineProperty(ctrl,key,{get:function(){return value},set:function(newValue){var oldValue=value;value=newValue;handler(newValue,oldValue)}})}function select(index){$scope.selectedItem=ctrl.matches[index];ctrl.hidden=true;ctrl.index=0;ctrl.matches=[];$timeout(function(){elements.$.input.controller("ngModel").$setViewValue(getDisplayValue($scope.selectedItem)||$scope.searchText);ctrl.hidden=true})}function clearValue(){$scope.searchText="";select(-1);var eventObj=document.createEvent("CustomEvent");eventObj.initCustomEvent("input",true,true,{value:$scope.searchText});elements.input.dispatchEvent(eventObj);elements.input.focus()}function fetchResults(searchText){var items=$scope.$parent.$eval(itemExpr),term=searchText.toLowerCase();if(angular.isArray(items)){handleResults(items)}else if(items){ctrl.loading=true;if(items.success)items.success(handleResults);if(items.then)items.then(handleResults);if(items.error)items.error(function(){ctrl.loading=false})}function handleResults(matches){cache[term]=matches;if(searchText!==$scope.searchText)return;ctrl.loading=false;promise=null;ctrl.matches=matches;ctrl.hidden=shouldHide();updateMessages();positionDropdown()}}function updateMessages(){ctrl.messages=[getCountMessage(),getCurrentDisplayValue()]}function getCountMessage(){if(lastCount===ctrl.matches.length)return"";lastCount=ctrl.matches.length;switch(ctrl.matches.length){case 0:return"There are no matches available.";case 1:return"There is 1 match available.";default:return"There are "+ctrl.matches.length+" matches available."}}function updateScroll(){if(!elements.li[ctrl.index])return;var li=elements.li[ctrl.index],top=li.offsetTop,bot=top+li.offsetHeight,hgt=elements.ul.clientHeight;if(top<elements.ul.scrollTop){elements.ul.scrollTop=top}else if(bot>elements.ul.scrollTop+hgt){elements.ul.scrollTop=bot-hgt}}function handleQuery(){var searchText=$scope.searchText,term=searchText.toLowerCase();if(promise&&promise.cancel){promise.cancel();promise=null}if(!$scope.noCache&&cache[term]){ctrl.matches=cache[term];updateMessages()}else{fetchResults(searchText)}if(hasFocus)ctrl.hidden=shouldHide()}}MdAutocompleteCtrl.$inject=["$scope","$element","$mdUtil","$mdConstant","$timeout","$mdTheming","$window","$animate","$rootElement","$attrs"];angular.module("material.components.autocomplete").directive("mdAutocomplete",MdAutocomplete);function MdAutocomplete($mdTheming,$mdUtil){return{controller:"MdAutocompleteCtrl",controllerAs:"$mdAutocompleteCtrl",scope:{inputName:"@mdInputName",inputMinlength:"@mdInputMinlength",inputMaxlength:"@mdInputMaxlength",searchText:"=?mdSearchText",selectedItem:"=?mdSelectedItem",itemsExpr:"@mdItems",itemText:"&mdItemText",placeholder:"@placeholder",noCache:"=?mdNoCache",itemChange:"&?mdSelectedItemChange",textChange:"&?mdSearchTextChange",minLength:"=?mdMinLength",delay:"=?mdDelay",autofocus:"=?mdAutofocus",floatingLabel:"@?mdFloatingLabel",autoselect:"=?mdAutoselect",menuClass:"@?mdMenuClass"},template:function(element,attr){var noItemsTemplate=getNoItemsTemplate(),itemTemplate=getItemTemplate(),leftover=element.html();return'        <md-autocomplete-wrap            layout="row"            ng-class="{ \'md-whiteframe-z1\': !floatingLabel }"            role="listbox">          '+getInputElement()+'          <md-progress-linear              ng-if="$mdAutocompleteCtrl.loading"              md-mode="indeterminate"></md-progress-linear>          <ul role="presentation"              class="md-autocomplete-suggestions md-whiteframe-z1 {{menuClass || \'\'}}"              id="ul-{{$mdAutocompleteCtrl.id}}"              ng-hide="$mdAutocompleteCtrl.hidden"              ng-mouseenter="$mdAutocompleteCtrl.listEnter()"              ng-mouseleave="$mdAutocompleteCtrl.listLeave()"              ng-mouseup="$mdAutocompleteCtrl.mouseUp()">            <li ng-repeat="(index, item) in $mdAutocompleteCtrl.matches"                ng-class="{ selected: index === $mdAutocompleteCtrl.index }"                ng-click="$mdAutocompleteCtrl.select(index)"                md-autocomplete-list-item="$mdAutocompleteCtrl.itemName">                '+itemTemplate+"            </li>            "+noItemsTemplate+'          </ul>        </md-autocomplete-wrap>        <aria-status            class="md-visually-hidden"            role="status"            aria-live="assertive">          <p ng-repeat="message in $mdAutocompleteCtrl.messages" ng-if="message">{{message}}</p>        </aria-status>';function getItemTemplate(){var templateTag=element.find("md-item-template").remove(),html=templateTag.length?templateTag.html():element.html();if(!templateTag.length)element.empty();return html}function getNoItemsTemplate(){var templateTag=element.find("md-not-found").remove(),template=templateTag.length?templateTag.html():"";return template?'<li ng-if="!$mdAutocompleteCtrl.matches.length && !$mdAutocompleteCtrl.loading                         && !$mdAutocompleteCtrl.hidden"                         ng-hide="$mdAutocompleteCtrl.hidden"                         md-autocomplete-parent-scope>'+template+"</li>":""}function getInputElement(){if(attr.mdFloatingLabel){return'            <md-input-container flex ng-if="floatingLabel">              <label>{{floatingLabel}}</label>              <input type="search"                  id="fl-input-{{$mdAutocompleteCtrl.id}}"                  name="{{inputName}}"                  autocomplete="off"                  ng-required="isRequired"                  ng-minlength="inputMinlength"                  ng-maxlength="inputMaxlength"                  ng-disabled="$mdAutocompleteCtrl.isDisabled"                  ng-model="$mdAutocompleteCtrl.scope.searchText"                  ng-keydown="$mdAutocompleteCtrl.keydown($event)"                  ng-blur="$mdAutocompleteCtrl.blur()"                  ng-focus="$mdAutocompleteCtrl.focus()"                  aria-owns="ul-{{$mdAutocompleteCtrl.id}}"                  aria-label="{{floatingLabel}}"                  aria-autocomplete="list"                  aria-haspopup="true"                  aria-activedescendant=""                  aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>              <div md-autocomplete-parent-scope md-autocomplete-replace>'+leftover+"</div>            </md-input-container>"}else{return'            <input flex type="search"                id="input-{{$mdAutocompleteCtrl.id}}"                name="{{inputName}}"                ng-if="!floatingLabel"                autocomplete="off"                ng-required="isRequired"                ng-disabled="$mdAutocompleteCtrl.isDisabled"                ng-model="$mdAutocompleteCtrl.scope.searchText"                ng-keydown="$mdAutocompleteCtrl.keydown($event)"                ng-blur="$mdAutocompleteCtrl.blur()"                ng-focus="$mdAutocompleteCtrl.focus()"                placeholder="{{placeholder}}"                aria-owns="ul-{{$mdAutocompleteCtrl.id}}"                aria-label="{{placeholder}}"                aria-autocomplete="list"                aria-haspopup="true"                aria-activedescendant=""                aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>            <button                type="button"                tabindex="-1"                ng-if="$mdAutocompleteCtrl.scope.searchText && !$mdAutocompleteCtrl.isDisabled"                ng-click="$mdAutocompleteCtrl.clear()">              <md-icon md-svg-icon="md-close"></md-icon>              <span class="md-visually-hidden">Clear</span>            </button>                '}}}}}MdAutocomplete.$inject=["$mdTheming","$mdUtil"];angular.module("material.components.autocomplete").controller("MdHighlightCtrl",MdHighlightCtrl);function MdHighlightCtrl($scope,$element,$interpolate){this.init=init;return init();function init(term){var unsafeText=$interpolate($element.html())($scope),text=angular.element("<div>").text(unsafeText).html(),flags=$element.attr("md-highlight-flags")||"",watcher=$scope.$watch(term,function(term){var regex=getRegExp(term,flags),html=text.replace(regex,'<span class="highlight">$&</span>');$element.html(html)});$element.on("$destroy",function(){watcher()})}function sanitize(term){if(!term)return term;return term.replace(/[\\\^\$\*\+\?\.\(\)\|\{\}\[\]]/g,"\\$&")}function getRegExp(text,flags){var str="";if(flags.indexOf("^")>=1)str+="^";str+=text;if(flags.indexOf("$")>=1)str+="$";return new RegExp(sanitize(str),flags.replace(/[\$\^]/g,""))}}MdHighlightCtrl.$inject=["$scope","$element","$interpolate"];angular.module("material.components.autocomplete").directive("mdHighlightText",MdHighlight);function MdHighlight(){return{terminal:true,scope:false,controller:"MdHighlightCtrl",link:function(scope,element,attr,ctrl){ctrl.init(attr.mdHighlightText)}}}angular.module("material.components.autocomplete").directive("mdAutocompleteListItem",MdAutocompleteListItem);function MdAutocompleteListItem($compile,$mdUtil){return{terminal:true,link:postLink,scope:false};function postLink(scope,element,attr){var ctrl=scope.$parent.$mdAutocompleteCtrl,newScope=ctrl.parent.$new(false,ctrl.parent),itemName=ctrl.scope.$eval(attr.mdAutocompleteListItem);newScope[itemName]=scope.item;$compile(element.contents())(newScope);element.attr({role:"option",id:"item_"+$mdUtil.nextUid()})}}MdAutocompleteListItem.$inject=["$compile","$mdUtil"];angular.module("material.components.autocomplete").directive("mdAutocompleteParentScope",MdAutocompleteParentScope);function MdAutocompleteParentScope($compile,$mdUtil){return{restrict:"A",terminal:true,link:postLink,scope:false};function postLink(scope,element,attr){var ctrl=scope.$parent.$mdAutocompleteCtrl;$compile(element.contents())(ctrl.parent);if(attr.hasOwnProperty("mdAutocompleteReplace")){element.after(element.contents());element.remove()}}}MdAutocompleteParentScope.$inject=["$compile","$mdUtil"];ng.material.components.autocomplete=angular.module("material.components.autocomplete");