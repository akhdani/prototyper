goog.provide("ng.material.components.progressLinear");goog.require("ng.material.core");angular.module("material.components.progressLinear",["material.core"]).directive("mdProgressLinear",MdProgressLinearDirective);function MdProgressLinearDirective($$rAF,$mdConstant,$mdTheming){return{restrict:"E",template:'<div class="md-container">'+'<div class="md-dashed"></div>'+'<div class="md-bar md-bar1"></div>'+'<div class="md-bar md-bar2"></div>'+"</div>",compile:compile};function compile(tElement,tAttrs,transclude){tElement.attr("aria-valuemin",0);tElement.attr("aria-valuemax",100);tElement.attr("role","progressbar");return postLink}function postLink(scope,element,attr){$mdTheming(element);var bar1Style=element[0].querySelector(".md-bar1").style,bar2Style=element[0].querySelector(".md-bar2").style,container=angular.element(element[0].querySelector(".md-container"));attr.$observe("value",function(value){if(attr.mdMode=="query"){return}var clamped=clamp(value);element.attr("aria-valuenow",clamped);bar2Style[$mdConstant.CSS.TRANSFORM]=transforms[clamped]});attr.$observe("mdBufferValue",function(value){bar1Style[$mdConstant.CSS.TRANSFORM]=transforms[clamp(value)]});$$rAF(function(){container.addClass("md-ready")})}function clamp(value){if(value>100){return 100}if(value<0){return 0}return Math.ceil(value||0)}}MdProgressLinearDirective.$inject=["$$rAF","$mdConstant","$mdTheming"];var transforms=function(){var values=new Array(101);for(var i=0;i<101;i++){values[i]=makeTransform(i)}return values;function makeTransform(value){var scale=value/100;var translateX=(value-100)/2;return"translateX("+translateX.toString()+"%) scale("+scale.toString()+", 1)"}}();ng.material.components.progressLinear=angular.module("material.components.progressLinear");