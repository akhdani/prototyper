goog.provide("ng.material.components.sidenav");goog.require("ng.material.components.backdrop");goog.require("ng.material.core");angular.module("material.components.sidenav",["material.core","material.components.backdrop"]).factory("$mdSidenav",SidenavService).directive("mdSidenav",SidenavDirective).directive("mdSidenavFocus",SidenavFocusDirective).controller("$mdSidenavController",SidenavController);function SidenavService($mdComponentRegistry,$q){return function(handle){var self;var errorMsg="SideNav '"+handle+"' is not available!";var instance=$mdComponentRegistry.get(handle);if(!instance){$mdComponentRegistry.notFoundError(handle)}return self={isOpen:function(){return instance&&instance.isOpen()},isLockedOpen:function(){return instance&&instance.isLockedOpen()},toggle:function(){return instance?instance.toggle():$q.reject(errorMsg)},open:function(){return instance?instance.open():$q.reject(errorMsg)},close:function(){return instance?instance.close():$q.reject(errorMsg)},then:function(callbackFn){var promise=instance?$q.when(instance):waitForInstance();return promise.then(callbackFn||angular.noop)}};function waitForInstance(){return $mdComponentRegistry.when(handle).then(function(it){instance=it;return it})}}}SidenavService.$inject=["$mdComponentRegistry","$q"];function SidenavFocusDirective(){return{restrict:"A",require:"^mdSidenav",link:function(scope,element,attr,sidenavCtrl){sidenavCtrl.focusElement(element)}}}function SidenavDirective($timeout,$animate,$parse,$log,$mdMedia,$mdConstant,$compile,$mdTheming,$q,$document){return{restrict:"E",scope:{isOpen:"=?mdIsOpen"},controller:"$mdSidenavController",compile:function(element){element.addClass("md-closed");element.attr("tabIndex","-1");return postLink}};function postLink(scope,element,attr,sidenavCtrl){var lastParentOverFlow;var triggeringElement=null;var promise=$q.when(true);var isLockedOpenParsed=$parse(attr.mdIsLockedOpen);var isLocked=function(){return isLockedOpenParsed(scope.$parent,{$media:function(arg){$log.warn("$media is deprecated for is-locked-open. Use $mdMedia instead.");return $mdMedia(arg)},$mdMedia:$mdMedia})};var backdrop=$compile('<md-backdrop class="md-sidenav-backdrop md-opaque ng-enter">')(scope);element.on("$destroy",sidenavCtrl.destroy);$mdTheming.inherit(backdrop,element);scope.$watch(isLocked,updateIsLocked);scope.$watch("isOpen",updateIsOpen);sidenavCtrl.$toggleOpen=toggleOpen;sidenavCtrl.focusElement(sidenavCtrl.focusElement()||element);function updateIsLocked(isLocked,oldValue){scope.isLockedOpen=isLocked;if(isLocked===oldValue){element.toggleClass("md-locked-open",!!isLocked)}else{$animate[isLocked?"addClass":"removeClass"](element,"md-locked-open")}backdrop.toggleClass("md-locked-open",!!isLocked)}function updateIsOpen(isOpen){var parent=element.parent();parent[isOpen?"on":"off"]("keydown",onKeyDown);backdrop[isOpen?"on":"off"]("click",close);if(isOpen){triggeringElement=$document[0].activeElement}var focusEl=sidenavCtrl.focusElement();disableParentScroll(isOpen);return promise=$q.all([isOpen?$animate.enter(backdrop,parent):$animate.leave(backdrop),$animate[isOpen?"removeClass":"addClass"](element,"md-closed")]).then(function(){if(scope.isOpen){focusEl&&focusEl.focus()}})}function disableParentScroll(disabled){var parent=element.parent();if(disabled){lastParentOverFlow=parent.css("overflow");parent.css("overflow","hidden")}else if(angular.isDefined(lastParentOverFlow)){parent.css("overflow",lastParentOverFlow);lastParentOverFlow=undefined}}function toggleOpen(isOpen){if(scope.isOpen==isOpen){return $q.when(true)}else{var deferred=$q.defer();scope.isOpen=isOpen;$timeout(function(){promise.then(function(result){if(!scope.isOpen){triggeringElement&&triggeringElement.focus();triggeringElement=null}deferred.resolve(result)})},0,false);return deferred.promise}}function onKeyDown(ev){var isEscape=ev.keyCode===$mdConstant.KEY_CODE.ESCAPE;return isEscape?close(ev):$q.when(true)}function close(ev){ev.preventDefault();ev.stopPropagation();return sidenavCtrl.close()}}}SidenavDirective.$inject=["$timeout","$animate","$parse","$log","$mdMedia","$mdConstant","$compile","$mdTheming","$q","$document"];function SidenavController($scope,$element,$attrs,$mdComponentRegistry,$q){var self=this,focusElement;self.isOpen=function(){return!!$scope.isOpen};self.isLockedOpen=function(){return!!$scope.isLockedOpen};self.open=function(){return self.$toggleOpen(true)};self.close=function(){return self.$toggleOpen(false)};self.toggle=function(){return self.$toggleOpen(!$scope.isOpen)};self.focusElement=function(el){if(angular.isDefined(el)){focusElement=el}return focusElement};self.$toggleOpen=function(){return $q.when($scope.isOpen)};self.destroy=$mdComponentRegistry.register(self,$attrs.mdComponentId)}SidenavController.$inject=["$scope","$element","$attrs","$mdComponentRegistry","$q"];ng.material.components.sidenav=angular.module("material.components.sidenav");