goog.provide("ng.material.components.input");goog.require("ng.material.core");angular.module("material.components.input",["material.core"]).directive("mdInputContainer",mdInputContainerDirective).directive("label",labelDirective).directive("input",inputTextareaDirective).directive("textarea",inputTextareaDirective).directive("mdMaxlength",mdMaxlengthDirective).directive("placeholder",placeholderDirective);function mdInputContainerDirective($mdTheming,$parse){ContainerCtrl.$inject=["$scope","$element","$attrs"];return{restrict:"E",link:postLink,controller:ContainerCtrl};function postLink(scope,element,attr){$mdTheming(element)}function ContainerCtrl($scope,$element,$attrs){var self=this;self.isErrorGetter=$attrs.mdIsError&&$parse($attrs.mdIsError);self.delegateClick=function(){self.input.focus()};self.element=$element;self.setFocused=function(isFocused){$element.toggleClass("md-input-focused",!!isFocused)};self.setHasValue=function(hasValue){$element.toggleClass("md-input-has-value",!!hasValue)};self.setInvalid=function(isInvalid){$element.toggleClass("md-input-invalid",!!isInvalid)};$scope.$watch(function(){return self.label&&self.input},function(hasLabelAndInput){if(hasLabelAndInput&&!self.label.attr("for")){self.label.attr("for",self.input.attr("id"))}})}}mdInputContainerDirective.$inject=["$mdTheming","$parse"];function labelDirective(){return{restrict:"E",require:"^?mdInputContainer",link:function(scope,element,attr,containerCtrl){if(!containerCtrl||attr.mdNoFloat)return;containerCtrl.label=element;scope.$on("$destroy",function(){containerCtrl.label=null})}}}function inputTextareaDirective($mdUtil,$window,$mdAria){return{restrict:"E",require:["^?mdInputContainer","?ngModel"],link:postLink};function postLink(scope,element,attr,ctrls){var containerCtrl=ctrls[0];var ngModelCtrl=ctrls[1]||$mdUtil.fakeNgModel();var isReadonly=angular.isDefined(attr.readonly);if(!containerCtrl)return;if(containerCtrl.input){throw new Error("<md-input-container> can only have *one* <input> or <textarea> child element!")}containerCtrl.input=element;if(!containerCtrl.label){$mdAria.expect(element,"aria-label",element.attr("placeholder"))}element.addClass("md-input");if(!element.attr("id")){element.attr("id","input_"+$mdUtil.nextUid())}if(element[0].tagName.toLowerCase()==="textarea"){setupTextarea()}var isErrorGetter=containerCtrl.isErrorGetter||function(){return ngModelCtrl.$invalid&&ngModelCtrl.$touched};scope.$watch(isErrorGetter,containerCtrl.setInvalid);ngModelCtrl.$parsers.push(ngModelPipelineCheckValue);ngModelCtrl.$formatters.push(ngModelPipelineCheckValue);element.on("input",inputCheckValue);if(!isReadonly){element.on("focus",function(ev){containerCtrl.setFocused(true)}).on("blur",function(ev){containerCtrl.setFocused(false);inputCheckValue()})}scope.$on("$destroy",function(){containerCtrl.setFocused(false);containerCtrl.setHasValue(false);containerCtrl.input=null});function ngModelPipelineCheckValue(arg){containerCtrl.setHasValue(!ngModelCtrl.$isEmpty(arg));return arg}function inputCheckValue(){containerCtrl.setHasValue(element.val().length>0||(element[0].validity||{}).badInput)}function setupTextarea(){var node=element[0];var onChangeTextarea=$mdUtil.debounce(growTextarea,1);function pipelineListener(value){onChangeTextarea();return value}if(ngModelCtrl){ngModelCtrl.$formatters.push(pipelineListener);ngModelCtrl.$viewChangeListeners.push(pipelineListener)}else{onChangeTextarea()}element.on("keydown input",onChangeTextarea);element.on("scroll",onScroll);angular.element($window).on("resize",onChangeTextarea);scope.$on("$destroy",function(){angular.element($window).off("resize",onChangeTextarea)});function growTextarea(){node.style.height="auto";node.scrollTop=0;var height=getHeight();if(height)node.style.height=height+"px"}function getHeight(){var line=node.scrollHeight-node.offsetHeight;return node.offsetHeight+(line>0?line:0)}function onScroll(e){node.scrollTop=0;var line=node.scrollHeight-node.offsetHeight;var height=node.offsetHeight+line;node.style.height=height+"px"}}}}inputTextareaDirective.$inject=["$mdUtil","$window","$mdAria"];function mdMaxlengthDirective($animate){return{restrict:"A",require:["ngModel","^mdInputContainer"],link:postLink};function postLink(scope,element,attr,ctrls){var maxlength;var ngModelCtrl=ctrls[0];var containerCtrl=ctrls[1];var charCountEl=angular.element('<div class="md-char-counter">');attr.$set("ngTrim","false");containerCtrl.element.append(charCountEl);ngModelCtrl.$formatters.push(renderCharCount);ngModelCtrl.$viewChangeListeners.push(renderCharCount);element.on("input keydown",function(){renderCharCount()});scope.$watch(attr.mdMaxlength,function(value){maxlength=value;if(angular.isNumber(value)&&value>0){if(!charCountEl.parent().length){$animate.enter(charCountEl,containerCtrl.element,angular.element(containerCtrl.element[0].lastElementChild))}renderCharCount()}else{$animate.leave(charCountEl)}});ngModelCtrl.$validators["md-maxlength"]=function(modelValue,viewValue){if(!angular.isNumber(maxlength)||maxlength<0){return true}return(modelValue||element.val()||viewValue||"").length<=maxlength};function renderCharCount(value){charCountEl.text((element.val()||value||"").length+"/"+maxlength);return value}}}mdMaxlengthDirective.$inject=["$animate"];function placeholderDirective($log){var blackListElements=["MD-SELECT"];return{restrict:"A",require:"^^?mdInputContainer",priority:200,link:postLink};function postLink(scope,element,attr,inputContainer){if(!inputContainer)return;if(blackListElements.indexOf(element[0].nodeName)!=-1)return;if(angular.isDefined(inputContainer.element.attr("md-no-float")))return;var placeholderText=attr.placeholder;element.removeAttr("placeholder");if(inputContainer.element.find("label").length==0){var placeholder='<label ng-click="delegateClick()">'+placeholderText+"</label>";inputContainer.element.addClass("md-icon-float");inputContainer.element.prepend(placeholder)}else{$log.warn("The placeholder='"+placeholderText+"' will be ignored since this md-input-container has a child label element.")}}}placeholderDirective.$inject=["$log"];ng.material.components.input=angular.module("material.components.input");