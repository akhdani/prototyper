goog.provide("ng.material.components.slider");goog.require("ng.material.core");angular.module("material.components.slider",["material.core"]).directive("mdSlider",SliderDirective);function SliderDirective($$rAF,$window,$mdAria,$mdUtil,$mdConstant,$mdTheming,$mdGesture,$parse){return{scope:{},require:"?ngModel",template:'<div class="md-slider-wrapper">        <div class="md-track-container">          <div class="md-track"></div>          <div class="md-track md-track-fill"></div>          <div class="md-track-ticks"></div>        </div>        <div class="md-thumb-container">          <div class="md-thumb"></div>          <div class="md-focus-thumb"></div>          <div class="md-focus-ring"></div>          <div class="md-sign">            <span class="md-thumb-text"></span>          </div>          <div class="md-disabled-thumb"></div>        </div>      </div>',compile:compile};function compile(tElement,tAttrs){tElement.attr({tabIndex:0,role:"slider"});$mdAria.expect(tElement,"aria-label");return postLink}function postLink(scope,element,attr,ngModelCtrl){$mdTheming(element);ngModelCtrl=ngModelCtrl||{$setViewValue:function(val){this.$viewValue=val;this.$viewChangeListeners.forEach(function(cb){cb()})},$parsers:[],$formatters:[],$viewChangeListeners:[]};var isDisabledParsed=attr.ngDisabled&&$parse(attr.ngDisabled);var isDisabledGetter=isDisabledParsed?function(){return isDisabledParsed(scope.$parent)}:angular.noop;var thumb=angular.element(element[0].querySelector(".md-thumb"));var thumbText=angular.element(element[0].querySelector(".md-thumb-text"));var thumbContainer=thumb.parent();var trackContainer=angular.element(element[0].querySelector(".md-track-container"));var activeTrack=angular.element(element[0].querySelector(".md-track-fill"));var tickContainer=angular.element(element[0].querySelector(".md-track-ticks"));var throttledRefreshDimensions=$mdUtil.throttle(refreshSliderDimensions,5e3);angular.isDefined(attr.min)?attr.$observe("min",updateMin):updateMin(0);angular.isDefined(attr.max)?attr.$observe("max",updateMax):updateMax(100);angular.isDefined(attr.step)?attr.$observe("step",updateStep):updateStep(1);var stopDisabledWatch=angular.noop;if(attr.ngDisabled){stopDisabledWatch=scope.$parent.$watch(attr.ngDisabled,updateAriaDisabled)}$mdGesture.register(element,"drag");element.on("keydown",keydownListener).on("$md.pressdown",onPressDown).on("$md.pressup",onPressUp).on("$md.dragstart",onDragStart).on("$md.drag",onDrag).on("$md.dragend",onDragEnd);function updateAll(){refreshSliderDimensions();ngModelRender();redrawTicks()}setTimeout(updateAll);var debouncedUpdateAll=$$rAF.throttle(updateAll);angular.element($window).on("resize",debouncedUpdateAll);scope.$on("$destroy",function(){angular.element($window).off("resize",debouncedUpdateAll);stopDisabledWatch()});ngModelCtrl.$render=ngModelRender;ngModelCtrl.$viewChangeListeners.push(ngModelRender);ngModelCtrl.$formatters.push(minMaxValidator);ngModelCtrl.$formatters.push(stepValidator);var min;var max;var step;function updateMin(value){min=parseFloat(value);element.attr("aria-valuemin",value);updateAll()}function updateMax(value){max=parseFloat(value);element.attr("aria-valuemax",value);updateAll()}function updateStep(value){step=parseFloat(value);redrawTicks()}function updateAriaDisabled(isDisabled){element.attr("aria-disabled",!!isDisabled)}var tickCanvas,tickCtx;function redrawTicks(){if(!angular.isDefined(attr.mdDiscrete))return;var numSteps=Math.floor((max-min)/step);if(!tickCanvas){var trackTicksStyle=$window.getComputedStyle(tickContainer[0]);tickCanvas=angular.element('<canvas style="position:absolute;">');tickCtx=tickCanvas[0].getContext("2d");tickCtx.fillStyle=trackTicksStyle.backgroundColor||"black";tickContainer.append(tickCanvas)}var dimensions=getSliderDimensions();tickCanvas[0].width=dimensions.width;tickCanvas[0].height=dimensions.height;var distance;for(var i=0;i<=numSteps;i++){distance=Math.floor(dimensions.width*(i/numSteps));tickCtx.fillRect(distance-1,0,2,dimensions.height)}}var sliderDimensions={};refreshSliderDimensions();function refreshSliderDimensions(){sliderDimensions=trackContainer[0].getBoundingClientRect()}function getSliderDimensions(){throttledRefreshDimensions();return sliderDimensions}function keydownListener(ev){if(element[0].hasAttribute("disabled")){return}var changeAmount;if(ev.keyCode===$mdConstant.KEY_CODE.LEFT_ARROW){changeAmount=-step}else if(ev.keyCode===$mdConstant.KEY_CODE.RIGHT_ARROW){changeAmount=step}if(changeAmount){if(ev.metaKey||ev.ctrlKey||ev.altKey){changeAmount*=4}ev.preventDefault();ev.stopPropagation();scope.$evalAsync(function(){setModelValue(ngModelCtrl.$viewValue+changeAmount)})}}function setModelValue(value){ngModelCtrl.$setViewValue(minMaxValidator(stepValidator(value)))}function ngModelRender(){if(isNaN(ngModelCtrl.$viewValue)){ngModelCtrl.$viewValue=ngModelCtrl.$modelValue}var percent=(ngModelCtrl.$viewValue-min)/(max-min);scope.modelValue=ngModelCtrl.$viewValue;element.attr("aria-valuenow",ngModelCtrl.$viewValue);setSliderPercent(percent);thumbText.text(ngModelCtrl.$viewValue)}function minMaxValidator(value){if(angular.isNumber(value)){return Math.max(min,Math.min(max,value))}}function stepValidator(value){if(angular.isNumber(value)){var formattedValue=Math.round(value/step)*step;return Math.round(formattedValue*1e3)/1e3}}function setSliderPercent(percent){activeTrack.css("width",percent*100+"%");thumbContainer.css("left",percent*100+"%");element.toggleClass("md-min",percent===0)}var isDragging=false;var isDiscrete=angular.isDefined(attr.mdDiscrete);function onPressDown(ev){if(isDisabledGetter())return;element.addClass("active");element[0].focus();refreshSliderDimensions();var exactVal=percentToValue(positionToPercent(ev.pointer.x));var closestVal=minMaxValidator(stepValidator(exactVal));scope.$apply(function(){setModelValue(closestVal);setSliderPercent(valueToPercent(closestVal))})}function onPressUp(ev){if(isDisabledGetter())return;element.removeClass("dragging active");var exactVal=percentToValue(positionToPercent(ev.pointer.x));var closestVal=minMaxValidator(stepValidator(exactVal));scope.$apply(function(){setModelValue(closestVal);ngModelRender()})}function onDragStart(ev){if(isDisabledGetter())return;isDragging=true;ev.stopPropagation();element.addClass("dragging");setSliderFromEvent(ev)}function onDrag(ev){if(!isDragging)return;ev.stopPropagation();setSliderFromEvent(ev)}function onDragEnd(ev){if(!isDragging)return;ev.stopPropagation();isDragging=false}function setSliderFromEvent(ev){if(isDiscrete)adjustThumbPosition(ev.pointer.x);else doSlide(ev.pointer.x)}function doSlide(x){scope.$evalAsync(function(){setModelValue(percentToValue(positionToPercent(x)))})}function adjustThumbPosition(x){var exactVal=percentToValue(positionToPercent(x));var closestVal=minMaxValidator(stepValidator(exactVal));setSliderPercent(positionToPercent(x));thumbText.text(closestVal)}function positionToPercent(x){return Math.max(0,Math.min(1,(x-sliderDimensions.left)/sliderDimensions.width))}function percentToValue(percent){return min+percent*(max-min)}function valueToPercent(val){return(val-min)/(max-min)}}}SliderDirective.$inject=["$$rAF","$window","$mdAria","$mdUtil","$mdConstant","$mdTheming","$mdGesture","$parse"];ng.material.components.slider=angular.module("material.components.slider");