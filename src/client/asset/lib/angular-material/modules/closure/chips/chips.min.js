goog.provide("ng.material.components.chips");goog.require("ng.material.components.autocomplete");goog.require("ng.material.core");angular.module("material.components.chips",["material.core","material.components.autocomplete"]);angular.module("material.components.chips").directive("mdChip",MdChip);var DELETE_HINT_TEMPLATE='    <span ng-if="!$mdChipsCtrl.readonly" class="md-visually-hidden">      {{$mdChipsCtrl.deleteHint}}    </span>';function MdChip($mdTheming){return{restrict:"E",require:"^?mdChips",compile:compile};function compile(element,attr){element.append(DELETE_HINT_TEMPLATE);return function postLink(scope,element,attr,ctrl){element.addClass("md-chip");$mdTheming(element);if(ctrl)angular.element(element[0].querySelector(".md-chip-content")).on("blur",function(){ctrl.selectedChip=-1})}}}MdChip.$inject=["$mdTheming"];angular.module("material.components.chips").directive("mdChipRemove",MdChipRemove);function MdChipRemove($timeout){return{restrict:"A",require:"^mdChips",scope:false,link:postLink};function postLink(scope,element,attr,ctrl){element.on("click",function(event){scope.$apply(function(){ctrl.removeChip(scope.$$replacedScope.$index)})});$timeout(function(){element.attr({tabindex:-1,ariaHidden:true});element.find("button").attr("tabindex","-1")})}}MdChipRemove.$inject=["$timeout"];angular.module("material.components.chips").directive("mdChipTransclude",MdChipTransclude);function MdChipTransclude($compile,$mdUtil){return{restrict:"EA",terminal:true,link:link,scope:false};function link(scope,element,attr){var ctrl=scope.$parent.$mdChipsCtrl,newScope=ctrl.parent.$new(false,ctrl.parent);newScope.$$replacedScope=scope;newScope.$chip=scope.$chip;newScope.$mdChipsCtrl=ctrl;element.html(ctrl.$scope.$eval(attr.mdChipTransclude));$compile(element.contents())(newScope)}}MdChipTransclude.$inject=["$compile","$mdUtil"];angular.module("material.components.chips").controller("MdChipsCtrl",MdChipsCtrl);function MdChipsCtrl($scope,$mdConstant,$log,$element,$timeout){this.$timeout=$timeout;this.$mdConstant=$mdConstant;this.$scope=$scope;this.parent=$scope.$parent;this.$log=$log;this.$element=$element;this.ngModelCtrl=null;this.userInputNgModelCtrl=null;this.userInputElement=null;this.items=[];this.selectedChip=-1;this.deleteHint="Press delete to remove this chip.";this.deleteButtonLabel="Remove";this.chipBuffer="";this.useMdOnAppend=false}MdChipsCtrl.$inject=["$scope","$mdConstant","$log","$element","$timeout"];MdChipsCtrl.prototype.inputKeydown=function(event){var chipBuffer=this.getChipBuffer();switch(event.keyCode){case this.$mdConstant.KEY_CODE.ENTER:if(this.$scope.requireMatch||!chipBuffer)break;event.preventDefault();this.appendChip(chipBuffer);this.resetChipBuffer();break;case this.$mdConstant.KEY_CODE.BACKSPACE:if(chipBuffer)break;event.stopPropagation();if(this.items.length)this.selectAndFocusChipSafe(this.items.length-1);break}};MdChipsCtrl.prototype.chipKeydown=function(event){if(this.getChipBuffer())return;switch(event.keyCode){case this.$mdConstant.KEY_CODE.BACKSPACE:case this.$mdConstant.KEY_CODE.DELETE:if(this.selectedChip<0)return;event.preventDefault();this.removeAndSelectAdjacentChip(this.selectedChip);break;case this.$mdConstant.KEY_CODE.LEFT_ARROW:event.preventDefault();if(this.selectedChip<0)this.selectedChip=this.items.length;if(this.items.length)this.selectAndFocusChipSafe(this.selectedChip-1);break;case this.$mdConstant.KEY_CODE.RIGHT_ARROW:event.preventDefault();this.selectAndFocusChipSafe(this.selectedChip+1);break;case this.$mdConstant.KEY_CODE.ESCAPE:case this.$mdConstant.KEY_CODE.TAB:if(this.selectedChip<0)return;event.preventDefault();this.onFocus();break}};MdChipsCtrl.prototype.getPlaceholder=function(){var useSecondary=this.items.length&&(this.secondaryPlaceholder==""||this.secondaryPlaceholder);return useSecondary?this.placeholder:this.secondaryPlaceholder};MdChipsCtrl.prototype.removeAndSelectAdjacentChip=function(index){var selIndex=this.getAdjacentChipIndex(index);this.removeChip(index);this.$timeout(angular.bind(this,function(){this.selectAndFocusChipSafe(selIndex)}))};MdChipsCtrl.prototype.resetSelectedChip=function(){this.selectedChip=-1};MdChipsCtrl.prototype.getAdjacentChipIndex=function(index){var len=this.items.length-1;return len==0?-1:index==len?index-1:index};MdChipsCtrl.prototype.appendChip=function(newChip){if(this.items.indexOf(newChip)+1)return;if(this.useMdOnAppend&&this.mdOnAppend){newChip=this.mdOnAppend({$chip:newChip})}this.items.push(newChip)};MdChipsCtrl.prototype.useMdOnAppendExpression=function(){this.useMdOnAppend=true};MdChipsCtrl.prototype.getChipBuffer=function(){return!this.userInputElement?this.chipBuffer:this.userInputNgModelCtrl?this.userInputNgModelCtrl.$viewValue:this.userInputElement[0].value};MdChipsCtrl.prototype.resetChipBuffer=function(){if(this.userInputElement){if(this.userInputNgModelCtrl){this.userInputNgModelCtrl.$setViewValue("");this.userInputNgModelCtrl.$render()}else{this.userInputElement[0].value=""}}else{this.chipBuffer=""}};MdChipsCtrl.prototype.removeChip=function(index){this.items.splice(index,1)};MdChipsCtrl.prototype.removeChipAndFocusInput=function(index){this.removeChip(index);this.onFocus()};MdChipsCtrl.prototype.selectAndFocusChipSafe=function(index){if(!this.items.length){this.selectChip(-1);this.onFocus();return}if(index===this.items.length)return this.onFocus();index=Math.max(index,0);index=Math.min(index,this.items.length-1);this.selectChip(index);this.focusChip(index)};MdChipsCtrl.prototype.selectChip=function(index){if(index>=-1&&index<=this.items.length){this.selectedChip=index}else{this.$log.warn("Selected Chip index out of bounds; ignoring.")}};MdChipsCtrl.prototype.selectAndFocusChip=function(index){this.selectChip(index);if(index!=-1){this.focusChip(index)}};MdChipsCtrl.prototype.focusChip=function(index){this.$element[0].querySelector('md-chip[index="'+index+'"] .md-chip-content').focus()};MdChipsCtrl.prototype.configureNgModel=function(ngModelCtrl){this.ngModelCtrl=ngModelCtrl;var self=this;ngModelCtrl.$render=function(){self.items=self.ngModelCtrl.$viewValue}};MdChipsCtrl.prototype.onFocus=function(){var input=this.$element[0].querySelector("input");input&&input.focus();this.resetSelectedChip()};MdChipsCtrl.prototype.onInputFocus=function(){this.inputHasFocus=true;this.resetSelectedChip()};MdChipsCtrl.prototype.onInputBlur=function(){this.inputHasFocus=false};MdChipsCtrl.prototype.configureUserInput=function(inputElement){this.userInputElement=inputElement;var ngModelCtrl=inputElement.controller("ngModel");if(ngModelCtrl!=this.ngModelCtrl){this.userInputNgModelCtrl=ngModelCtrl}var scope=this.$scope;var ctrl=this;inputElement.attr({tabindex:0}).on("keydown",function(event){scope.$apply(angular.bind(ctrl,function(){ctrl.inputKeydown(event)}))}).on("focus",angular.bind(ctrl,ctrl.onInputFocus)).on("blur",angular.bind(ctrl,ctrl.onInputBlur))};MdChipsCtrl.prototype.configureAutocomplete=function(ctrl){ctrl.registerSelectedItemWatcher(angular.bind(this,function(item){if(item){this.appendChip(item);this.resetChipBuffer()}}));this.$element.find("input").on("focus",angular.bind(this,this.onInputFocus)).on("blur",angular.bind(this,this.onInputBlur))};MdChipsCtrl.prototype.hasFocus=function(){return this.inputHasFocus||this.selectedChip>=0};angular.module("material.components.chips").directive("mdChips",MdChips);var MD_CHIPS_TEMPLATE='      <md-chips-wrap          ng-if="!$mdChipsCtrl.readonly || $mdChipsCtrl.items.length > 0"          ng-keydown="$mdChipsCtrl.chipKeydown($event)"          ng-class="{ \'md-focused\': $mdChipsCtrl.hasFocus() }"          class="md-chips">        <md-chip ng-repeat="$chip in $mdChipsCtrl.items"            index="{{$index}}"            ng-class="{\'md-focused\': $mdChipsCtrl.selectedChip == $index}">          <div class="md-chip-content"              tabindex="-1"              aria-hidden="true"              ng-focus="!$mdChipsCtrl.readonly && $mdChipsCtrl.selectChip($index)"              md-chip-transclude="$mdChipsCtrl.chipContentsTemplate"></div>          <div class="md-chip-remove-container"              md-chip-transclude="$mdChipsCtrl.chipRemoveTemplate"></div>        </md-chip>        <div ng-if="!$mdChipsCtrl.readonly && $mdChipsCtrl.ngModelCtrl"            class="md-chip-input-container"            md-chip-transclude="$mdChipsCtrl.chipInputTemplate"></div>        </div>      </md-chips-wrap>';var CHIP_INPUT_TEMPLATE='        <input            tabindex="0"            placeholder="{{$mdChipsCtrl.getPlaceholder()}}"            aria-label="{{$mdChipsCtrl.getPlaceholder()}}"            ng-model="$mdChipsCtrl.chipBuffer"            ng-focus="$mdChipsCtrl.onInputFocus()"            ng-blur="$mdChipsCtrl.onInputBlur()"            ng-keydown="$mdChipsCtrl.inputKeydown($event)">';var CHIP_DEFAULT_TEMPLATE="      <span>{{$chip}}</span>";var CHIP_REMOVE_TEMPLATE='      <button          class="md-chip-remove"          ng-if="!$mdChipsCtrl.readonly"          ng-click="$mdChipsCtrl.removeChipAndFocusInput($$replacedScope.$index)"          type="button"          aria-hidden="true"          tabindex="-1">        <md-icon md-svg-icon="md-close"></md-icon>        <span class="md-visually-hidden">          {{$mdChipsCtrl.deleteButtonLabel}}        </span>      </button>';function MdChips($mdTheming,$mdUtil,$compile,$log,$timeout){return{template:function(element,attrs){var content=attrs["$mdUserTemplate"]=element.clone();return MD_CHIPS_TEMPLATE},require:["mdChips"],restrict:"E",controller:"MdChipsCtrl",controllerAs:"$mdChipsCtrl",bindToController:true,compile:compile,scope:{readonly:"=readonly",placeholder:"@",secondaryPlaceholder:"@",mdOnAppend:"&",deleteHint:"@",deleteButtonLabel:"@",requireMatch:"=?mdRequireMatch"}};function compile(element,attr){var userTemplate=attr["$mdUserTemplate"];attr["$mdUserTemplate"]=null;var chipRemoveTemplate=getTemplateByQuery("md-chips>*[md-chip-remove]")||CHIP_REMOVE_TEMPLATE,chipContentsTemplate=getTemplateByQuery("md-chips>md-chip-template")||CHIP_DEFAULT_TEMPLATE,chipInputTemplate=getTemplateByQuery("md-chips>md-autocomplete")||getTemplateByQuery("md-chips>input")||CHIP_INPUT_TEMPLATE,staticChips=userTemplate.find("md-chip");if(userTemplate[0].querySelector("md-chip-template>*[md-chip-remove]")){$log.warn("invalid placement of md-chip-remove within md-chip-template.")}function getTemplateByQuery(query){if(!attr.ngModel)return;var element=userTemplate[0].querySelector(query);return element&&element.outerHTML}return function postLink(scope,element,attrs,controllers){$mdUtil.initOptionalProperties(scope,attr);$mdTheming(element);var mdChipsCtrl=controllers[0];mdChipsCtrl.chipContentsTemplate=chipContentsTemplate;mdChipsCtrl.chipRemoveTemplate=chipRemoveTemplate;mdChipsCtrl.chipInputTemplate=chipInputTemplate;element.attr({ariaHidden:true,tabindex:-1}).on("focus",function(){mdChipsCtrl.onFocus()});if(attr.ngModel){mdChipsCtrl.configureNgModel(element.controller("ngModel"));if(attrs.mdOnAppend)mdChipsCtrl.useMdOnAppendExpression();if(chipInputTemplate!=CHIP_INPUT_TEMPLATE){$timeout(function(){if(chipInputTemplate.indexOf("<md-autocomplete")===0)mdChipsCtrl.configureAutocomplete(element.find("md-autocomplete").controller("mdAutocomplete"));mdChipsCtrl.configureUserInput(element.find("input"))})}}if(staticChips.length>0){var compiledStaticChips=$compile(staticChips)(scope.$parent);$timeout(function(){element.find("md-chips-wrap").prepend(compiledStaticChips)})}}}}MdChips.$inject=["$mdTheming","$mdUtil","$compile","$log","$timeout"];angular.module("material.components.chips").controller("MdContactChipsCtrl",MdContactChipsCtrl);function MdContactChipsCtrl(){this.selectedItem=null;this.searchText=""}MdContactChipsCtrl.prototype.queryContact=function(searchText){var results=this.contactQuery({$query:searchText});return this.filterSelected?results.filter(angular.bind(this,this.filterSelectedContacts)):results};MdContactChipsCtrl.prototype.filterSelectedContacts=function(contact){return this.contacts.indexOf(contact)==-1};angular.module("material.components.chips").directive("mdContactChips",MdContactChips);var MD_CONTACT_CHIPS_TEMPLATE='      <md-chips class="md-contact-chips"          ng-model="$mdContactChipsCtrl.contacts"          md-require-match="$mdContactChipsCtrl.requireMatch"          md-autocomplete-snap>          <md-autocomplete              md-menu-class="md-contact-chips-suggestions"              md-selected-item="$mdContactChipsCtrl.selectedItem"              md-search-text="$mdContactChipsCtrl.searchText"              md-items="item in $mdContactChipsCtrl.queryContact($mdContactChipsCtrl.searchText)"              md-item-text="$mdContactChipsCtrl.mdContactName"              md-no-cache="true"              md-autoselect              placeholder="{{$mdContactChipsCtrl.contacts.length == 0 ?                  $mdContactChipsCtrl.placeholder : $mdContactChipsCtrl.secondaryPlaceholder}}">            <div class="md-contact-suggestion">              <img                   ng-src="{{item[$mdContactChipsCtrl.contactImage]}}"                  alt="{{item[$mdContactChipsCtrl.contactName]}}" />              <span class="md-contact-name" md-highlight-text="$mdContactChipsCtrl.searchText">                {{item[$mdContactChipsCtrl.contactName]}}              </span>              <span class="md-contact-email" >{{item[$mdContactChipsCtrl.contactEmail]}}</span>            </div>          </md-autocomplete>          <md-chip-template>            <div class="md-contact-avatar">              <img                   ng-src="{{$chip[$mdContactChipsCtrl.contactImage]}}"                  alt="{{$chip[$mdContactChipsCtrl.contactName]}}" />            </div>            <div class="md-contact-name">              {{$chip[$mdContactChipsCtrl.contactName]}}            </div>          </md-chip-template>      </md-chips>';function MdContactChips($mdTheming,$mdUtil){return{template:function(element,attrs){return MD_CONTACT_CHIPS_TEMPLATE},restrict:"E",controller:"MdContactChipsCtrl",controllerAs:"$mdContactChipsCtrl",bindToController:true,compile:compile,scope:{contactQuery:"&mdContacts",placeholder:"@",secondaryPlaceholder:"@",contactName:"@mdContactName",contactImage:"@mdContactImage",contactEmail:"@mdContactEmail",contacts:"=ngModel",requireMatch:"=?mdRequireMatch"}};function compile(element,attr){return function postLink(scope,element,attrs,controllers){$mdUtil.initOptionalProperties(scope,attr);$mdTheming(element);element.attr("tabindex","-1")}}}MdContactChips.$inject=["$mdTheming","$mdUtil"];ng.material.components.chips=angular.module("material.components.chips");